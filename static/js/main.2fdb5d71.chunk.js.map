{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","buttons","sortType","Alphabetically","buttonStyle","Length","Reverse","App","useState","Null","setSortType","isReversed","setIsReversed","sortedGoods","toSortArray","arrayCopy","sort","a","b","localeCompare","length","reverse","sortByParams","isSorted","Boolean","className","map","button","onClick","type","cn","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qCAAAA,E,wBAAAA,E,QAAAA,E,mBAAAA,M,KAYL,IAAME,EAAqB,CACzB,CAAEC,SAAUH,EAASI,eAAgBC,YAAa,WAClD,CAAEF,SAAUH,EAASM,OAAQD,YAAa,cAC1C,CAAEF,SAAUH,EAASO,QAASF,YAAa,eA4BhCG,EAAgB,WAC3B,MAAgCC,mBAAmBT,EAASU,MAA5D,mBAAOP,EAAP,KAAiBQ,EAAjB,KACA,EAAoCF,oBAAkB,GAAtD,mBAAOG,EAAP,KAAmBC,EAAnB,KAOA,IAAMC,EAlCa,SACnBC,EACAZ,EACAS,GAEA,IAAMI,EAAmB,YAAOD,GAiBhC,OAfIZ,GACFa,EAAUC,MAAK,SAACC,EAAWC,GACzB,OAAQhB,GACN,KAAKH,EAASI,eACZ,OAAOc,EAAEE,cAAcD,GAEzB,KAAKnB,EAASM,OACZ,OAAOY,EAAEG,OAASF,EAAEE,OAEtB,QACE,OAAO,MAKRT,EAAaI,EAAUM,UAAYN,EAYZO,CAC5BtB,EACAE,EACAS,GAGIY,EAAqBC,QAAQtB,IAAaS,EAEhD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACGxB,EAAQyB,KAAI,SAACC,GAAD,OACX,wBACEC,QAAS,kBACPD,EAAOzB,WAAaH,EAASO,QACzBM,GAAeD,GACfD,EAAYiB,EAAOzB,WAEzB2B,KAAK,SACLJ,UACEK,IACE,SACAH,EAAOvB,YACP,CACE,WAAYuB,EAAOzB,WAAaH,EAASO,SACpCK,EACDgB,EAAOzB,WAAaA,IAdhC,SAmBGyB,EAAOzB,cAIXqB,GAEG,wBACEK,QA3CZ,WACElB,EAAYX,EAASU,MACrBG,GAAc,IA0CJiB,KAAK,SACLJ,UAAU,4BAHZ,sBAUN,6BACGZ,EAAYa,KAAI,SAACK,GAAD,OACf,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCpHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2fdb5d71.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'Sort alphabetically',\n  Length = 'Sort by length',\n  Null = '',\n  Reverse = 'Reverse',\n}\n\ninterface Buttons {\n  sortType: SortType,\n  buttonStyle: string,\n}\n\nconst buttons: Buttons[] = [\n  { sortType: SortType.Alphabetically, buttonStyle: 'is-info' },\n  { sortType: SortType.Length, buttonStyle: 'is-success' },\n  { sortType: SortType.Reverse, buttonStyle: 'is-warning' },\n];\n\nconst sortByParams = (\n  toSortArray: string[],\n  sortType: SortType,\n  isReversed: boolean,\n): string[] => {\n  const arrayCopy: string[] = [...toSortArray];\n\n  if (sortType) {\n    arrayCopy.sort((a: string, b: string) => {\n      switch (sortType) {\n        case SortType.Alphabetically:\n          return a.localeCompare(b);\n\n        case SortType.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversed ? arrayCopy.reverse() : arrayCopy;\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.Null);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  function reset(): void {\n    setSortType(SortType.Null);\n    setIsReversed(false);\n  }\n\n  const sortedGoods: string[] = sortByParams(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  const isSorted: boolean = (Boolean(sortType) || isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        {buttons.map((button: Buttons) => (\n          <button\n            onClick={() => (\n              button.sortType === SortType.Reverse\n                ? setIsReversed(!isReversed)\n                : setSortType(button.sortType)\n            )}\n            type=\"button\"\n            className={\n              cn(\n                'button',\n                button.buttonStyle,\n                {\n                  'is-light': button.sortType === SortType.Reverse\n                    ? !isReversed\n                    : button.sortType !== sortType,\n                },\n              )\n            }\n          >\n            {button.sortType}\n          </button>\n        ))}\n\n        {isSorted\n          && (\n            <button\n              onClick={reset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {sortedGoods.map((good: string) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}